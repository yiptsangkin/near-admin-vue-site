(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{330:function(a,t,s){"use strict";s.r(t);var e=s(33),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"风格指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#风格指南"}},[a._v("#")]),a._v(" 风格指南")]),a._v(" "),s("p",[a._v("使用near-admin需要遵循框架本身的一些开发约定，希望开发者能够按照约定进行开发，减少一些不必要的弯路，同时也增加项目的可维护性。")]),a._v(" "),s("h2",{attrs:{id:"开发约定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发约定"}},[a._v("#")]),a._v(" 开发约定")]),a._v(" "),s("h4",{attrs:{id:"_1、不要动core里面的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、不要动core里面的内容"}},[a._v("#")]),a._v(" 1、不要动core里面的内容")]),a._v(" "),s("p",[a._v("core文件夹中是框架层面的代码，因此不要改动，主要是以后版本更新方面，只需要替换简单的整体替换core即可。")]),a._v(" "),s("h4",{attrs:{id:"_2、创建单个单页应用的目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、创建单个单页应用的目录结构"}},[a._v("#")]),a._v(" 2、创建单个单页应用的目录结构")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("├── auth                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 多页名")]),a._v("\n    ├── App.vue          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 实例")]),a._v("\n    ├── auth.ts          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 入口文件")]),a._v("\n    ├── component        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 组件")]),a._v("\n    ├── page.config.json "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 页面配置（用于引入js和css）")]),a._v("\n    ├── router           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 路由")]),a._v("\n    │   └── auth.ts\n    └── view             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# view层的组件")]),a._v("\n")])])]),s("p",[a._v("这是一个单页应用的目录结构，包含了实例、入口文件、组件文件夹、页面配置json、路由以及view层的组件内容，需要注意的是入口文件的命名需要跟单页应用的命名一致，即auth.ts，写法跟单页应用基本一致。")]),a._v(" "),s("h4",{attrs:{id:"_3、api需要维护在api的文件夹中，并按照实际进行合理的拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、api需要维护在api的文件夹中，并按照实际进行合理的拆分"}},[a._v("#")]),a._v(" 3、api需要维护在api的文件夹中，并按照实际进行合理的拆分")]),a._v(" "),s("p",[a._v("考虑到地址和方法的修改，这里建议分成apiUrl和apiMethod两个文件，具体可以参考框架自带的登录页和管理页的api写法。")]),a._v(" "),s("h4",{attrs:{id:"_4、雪碧图icon维护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、雪碧图icon维护"}},[a._v("#")]),a._v(" 4、雪碧图icon维护")]),a._v(" "),s("p",[a._v("对于要合成雪碧图的icon，请丢在assets/images/icon目录中，框架会自动帮你打包生成css和图片")]),a._v(" "),s("h4",{attrs:{id:"_5、view中的组件都需要mixin-corebase和base两个组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、view中的组件都需要mixin-corebase和base两个组件"}},[a._v("#")]),a._v(" 5、view中的组件都需要mixin CoreBase和Base两个组件")]),a._v(" "),s("p",[a._v("一些页面通用的方法可以放到其中维护，在没有模板的情况下大家可以在webstorm中配置对应的模板，这样创建新的页面的时候就不会担心漏掉了")]),a._v(" "),s("h4",{attrs:{id:"_6、字典维护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、字典维护"}},[a._v("#")]),a._v(" 6、字典维护")]),a._v(" "),s("p",[a._v("在我们实际项目的开发过程中，我们经常会使用到一些字典值，例如一些通用查询的查询字段，这些我们都不推荐直接在代码中写，因为这样子万一多个地方都使用到，\n后期的修改成本非常的大，因此我们推进在assets/ts/custom/dict.ts中维护你需要用到的字典值。框架本身已经在webpack构建中全局引入了dict和config，因此在编写\n过程中可以省略引入的操作。")]),a._v(" "),s("h2",{attrs:{id:"风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#风格"}},[a._v("#")]),a._v(" 风格")]),a._v(" "),s("p",[a._v("near-admin的风格基本上是参照vue官方的代码风格进行编写的，开发者只需要遵循相关的"),s("a",{attrs:{href:"https://cn.vuejs.org/v2/style-guide/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("风格指南"),s("OutboundLink")],1),a._v("即可。")])])}),[],!1,null,null,null);t.default=r.exports}}]);